const Telegraf = require('telegraf');
const Stage = require('telegraf/stage')
const session = require('telegraf/session')
const BaseScene = require('telegraf/scenes/base')
const SocksAgent = require('socks5-https-client/lib/Agent');
const Parser = require('./parser.js');
const fs = require('fs');

/* proxy is needed to work with bot from Russia
free-socks: http://spys.one/en/socks-proxy-list/ */
const socksAgent = new SocksAgent({
});

const bot = new Telegraf('token', {
    telegram: { agent: socksAgent }
});

/* New scene creation */
const nickname = new BaseScene('nickname');
const password = new BaseScene('password');
const menu = new BaseScene('menu');
const menuLoggedIn = new BaseScene('menuLoggedIn');
const lk = new BaseScene('lk');
const tfa = new BaseScene('tfa');
const newAcc = new BaseScene('newAcc');
const forgetMe = new BaseScene('forgetMe');
const challenge = new BaseScene('challenge');

tfa.enter(async (ctx) => {
    let keyboard = [['üîë–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã']];
    if(ctx.session.totp){
        if(ctx.session.sms)
            keyboard[0].push('üì¨SMS');
        keyboard.push(['üíî–û—Ç–º–µ–Ω–∞'])
        ctx.replyWithHTML('üì°<b>–£ —Ç–µ–±—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</b>. –í–≤–µ–¥–∏ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–≤–æ–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±',
        Telegraf.Markup.keyboard(keyboard).oneTime().resize().extra());
    }
    else if(ctx.session.sms){
        keyboard.push(['üíî–û—Ç–º–µ–Ω–∞'])
        ctx.replyWithHTML(`üì°<b>–£ —Ç–µ–±—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</b>. –ù–∞ —Ç–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω, –æ–∫–∞–Ω—á–∏–≤–∞—é—â–∏–π—Å—è –Ω–∞ ${ctx.session.phone}, –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–º—Å —Å –∫–æ–¥–æ–º. –í–≤–µ–¥–∏ –µ–≥–æ —Å—é–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±`,
        Telegraf.Markup.keyboard(keyboard).oneTime().resize().extra());
    }
})

tfa.hears('üì¨SMS', async (ctx) => {
    ctx.session.parser.tfa('SMS', ctx.session.identifier).then(res => {
        if(res){
            let jsonData = JSON.parse(res['data']);
            ctx.replyWithHTML(`üì°<b>–ù–∞ —Ç–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω, –æ–∫–∞–Ω—á–∏–≤–∞—é—â–∏–π—Å—è –Ω–∞ ${jsonData['two_factor_info']['obfuscated_phone_number']}, –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–º—Å —Å –∫–æ–¥–æ–º</b>. –ù–∞–ø–∏—à–∏ –µ–≥–æ —Å—é–¥–∞`);
            ctx.session.identifier = jsonData['two_factor_info']['two_factor_identifier'];
        }
        else{
            ctx.replyWithHTML('‚ùé<b>–û—à–∏–±–∫–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–æ–¥–∞</b>. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑');
        }
    });
});

tfa.hears('–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã', ctx => {
    ctx.replyWithHTML('‚ùé<b>–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è</b>. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±');
});

tfa.hears('üíî–û—Ç–º–µ–Ω–∞', async(ctx) => {
    ctx.replyWithHTML('‚ùé<b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>. –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç–µ—Ä—Ç—ã')
    .then(res => {
        ctx.scene.enter('menu');
    })
    delete ctx.session.identifier;
    delete ctx.session.sms;
    delete ctx.session.totp;
    delete ctx.session.userAccount;
    delete ctx.session.parser;
    delete ctx.session.phone;
    fs.unlink('./cookie/' + ctx.from.id, res => {});
});

tfa.on('message', async(ctx)=> {
    ctx.session.parser.tfa('auth', ctx.session.identifier, ctx.message.text).then(async (res) => {
        if(res['authenticated']){
            let jsData = res;
            let userData = {
                igNickname : ctx.session.userAccount,
                igId : jsData['userId'],
                tgId : ctx.from.id,
                rights: 0,
                timeupdate: null,
                loggedIn: true,
                isFirstParse: true,
                followers:[],
                following: [],
                idontFollowBack: [],
                dontFollowMeBack: []
            }
            let data = JSON.stringify(userData, null, 2);
            fs.writeFile('./userdata/' + ctx.from.id + '.json', data, err =>{
                if(!err){
                    ctx.session.isLoggedIn = true;
                    delete ctx.session.identifier;
                    delete ctx.session.sms;
                    delete ctx.session.totp;
                    delete ctx.session.phone;
                    ctx.scene.enter('menuLoggedIn');
                }
            });
        }

        else if(res['message'] == 'checkpoint_required'){
            delete ctx.session.userPassword;
            let jsData = res;
            let userData = {
                igNickname : ctx.session.userAccount,
                igId : jsData['checkpoint_url'].split('/')[2],
                tgId : ctx.from.id,
                rights: 0,
                timeupdate: null,
                loggedIn: false,
                isFirstParse: true,
                followers:[],
                following: [],
                idontFollowBack: [],
                dontFollowMeBack: []
            }
            let data = JSON.stringify(userData, null, 2);
            fs.writeFile('./userdata/' + tgId + '.json', data, err=>{
                if(!err){
                    ctx.session.isLoggedIn = true;
                    ctx.session.url = jsData['checkpoint_url'];
                    ctx.scene.enter('challenge');
                }
            });
        }

        else if(res['error_type'] == "sms_code_validation_code_invalid"){
            ctx.replyWithHTML('‚ùé<b>–ö–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ</b>. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –∏–ª–∏ –æ—Ç–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏—é');
            // ctx.session.isLoggedIn = true;
            
        }

        else if(res['error_type'] == 'invalid_nonce'){
            ctx.replyWithHTML('‚ùé<b>–ö–æ–¥ –∏—Å—Ç–µ–∫</b>. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –∏–ª–∏ –æ—Ç–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏—é');
        }
            
        else{
            ctx.replyWithHTML('‚ùé<b>–°–ª—É—á–∏–ª–∞—Å—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞</b>. –ù–∞–ø–∏—à–∏ @belotserkovtsev, –µ—Å–ª–∏ –¥—É–º–∞–µ—à—å —á—Ç–æ —ç—Ç–æ –±–∞–≥')
            .then(res => {
                ctx.scene.enter('menu');
            })
            delete ctx.session.identifier;
            delete ctx.session.sms;
            delete ctx.session.totp;
            delete ctx.session.userAccount;
            delete ctx.session.parser;
            delete ctx.session.phone;
            fs.unlink('./cookie/' + ctx.from.id, res => {});
        }
        
        
        
        
    })
    .catch(err => {
        console.log(err);
        ctx.replyWithHTML('‚ùé<b>–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è –æ—à–∏–±–∫–∞</b>. –ù–∞–ø–∏—à–∏ @belotserkovtsev –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—à—å —á—Ç–æ —ç—Ç–æ –±–∞–≥ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑');
        ctx.scene.enter('menu');
    })
})


password.enter(async(ctx) => {
    ctx.replyWithHTML('üîê–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –æ—Ç –∏–Ω—Å—Ç–∞–≥—Ä–∞–º. –ë–æ—Ç <b>–Ω–µ —Ö—Ä–∞–Ω–∏—Ç</b> –∏ <b>–Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç</b> —Ç–≤–æ–π –ø–∞—Ä–æ–ª—å —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º',
    Telegraf.Markup.keyboard([['üíî–û—Ç–º–µ–Ω–∏—Ç—å']]).oneTime().resize().extra())
})

password.hears('üíî–û—Ç–º–µ–Ω–∏—Ç—å', async (ctx) => {
    delete ctx.session.parser;
    fs.unlink('./cookie/' + ctx.from.id, res => {});
    delete ctx.session.userAccount;
    ctx.scene.enter('menu');
});

password.on('sticker', async (ctx) => ctx.reply('üëç'));

password.on('message', async(ctx) => {
    if(ctx.message.text == '‚úÖ–î–∞'){
        // ctx.session.parser = new Parser(ctx.session.userAccount, ctx.message.from.username);
        ctx.session.parser.login(ctx.session.userAccount, ctx.session.userPassword).then(async (res) => {
            let jsData = JSON.parse(res['data'])
            if(jsData['two_factor_required']){
                ctx.session.identifier = jsData['two_factor_info']['two_factor_identifier'];
                ctx.session.sms = jsData['two_factor_info']['sms_two_factor_on'];
                ctx.session.totp = jsData['two_factor_info']['totp_two_factor_on'];
                ctx.session.phone = jsData['two_factor_info']['obfuscated_phone_number'];
                delete ctx.session.userPassword;
                ctx.scene.enter('tfa');
            }
            else if(jsData['authenticated']){
                let userData = {
                    igNickname : ctx.session.userAccount,
                    igId : jsData['userId'],
                    tgId : ctx.from.id,
                    rights: 0,
                    timeupdate: null,
                    loggedIn: true,
                    isFirstParse: true,
                    followers:[],
                    following: [],
                    idontFollowBack: [],
                    dontFollowMeBack: []
                }
                let data = JSON.stringify(userData, null, 2);
                fs.writeFile('./userdata/' + ctx.from.id + '.json', data, err=>{
                    if(!err){
                        ctx.session.isLoggedIn = true;
                        delete ctx.session.userPassword;
                        ctx.scene.enter('menuLoggedIn');
                    }
                });
                
            }
            else if(jsData['user']){
                ctx.replyWithHTML('üîí<b>–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ</b>! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',
                Telegraf.Markup.keyboard([['üíî–û—Ç–º–µ–Ω–∏—Ç—å']]).oneTime().resize().extra());
                delete ctx.session.userPassword;
            }
            else if(jsData['message'] == 'checkpoint_required'){
                delete ctx.session.userPassword;
                let userData = {
                    igNickname : ctx.session.userAccount,
                    igId : jsData['checkpoint_url'].split('/')[2],
                    tgId : ctx.from.id,
                    rights: 0,
                    timeupdate: null,
                    loggedIn: false,
                    isFirstParse: true,
                    followers:[],
                    following: [],
                    idontFollowBack: [],
                    dontFollowMeBack: []
                }
                let data = JSON.stringify(userData, null, 2);
                fs.writeFile('./userdata/' + ctx.from.id + '.json', data, err=>{
                    if(!err){
                        ctx.session.isLoggedIn = true;
                        ctx.session.url = jsData['checkpoint_url'];
                        ctx.scene.enter('challenge');
                    }
                });
            }
            else{
                delete ctx.session.userPassword;
                delete ctx.session.parser;
                ctx.replyWithHTML('‚ùé<b>–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç. –í–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è –æ—à–∏–±–∫–∞</b>. –ù–∞–ø–∏—à–∏ @belotserkovtsev –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—à—å —á—Ç–æ —ç—Ç–æ –±–∞–≥');
                // if(fs.existsSync('./cookie/' + ctx.message.from.username))
                fs.unlink('./cookie/' + ctx.from.id, res => {});
                delete ctx.session.userAccount;
                ctx.scene.enter('menu');
            }
        }).catch(async(err) => {
            console.log(err);
            ctx.replyWithHTML('‚ùé<b>–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è –æ—à–∏–±–∫–∞</b>. –ù–∞–ø–∏—à–∏ @belotserkovtsev –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—à—å —á—Ç–æ —ç—Ç–æ –±–∞–≥ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑');
            ctx.scene.enter('menu');
        })
    }
    else if(ctx.message.text == '‚ùé–ù–µ—Ç'){
        delete ctx.session.userPassword;
        ctx.reply('–î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑–æ–∫',
        Telegraf.Markup.keyboard([['üíî–û—Ç–º–µ–Ω–∏—Ç—å']]).oneTime().resize().extra());
    }
    else{
        ctx.session.userPassword = ctx.message.text;
        ctx.replyWithHTML('üîì<b>–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω –≤–µ—Ä–Ω–æ?</b>', Telegraf.Markup
        .keyboard([['‚úÖ–î–∞', '‚ùé–ù–µ—Ç']]).oneTime().resize().extra());
    }
})

nickname.enter(ctx => {
    ctx.replyWithHTML('üëΩ<b>–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º</b>. –ù–∞–ø—Ä–∏–º–µ—Ä @belotserkovtsev', 
    Telegraf.Markup.keyboard([['üíî–û—Ç–º–µ–Ω–∏—Ç—å']]).oneTime().resize().extra());
});
nickname.hears('üíî–û—Ç–º–µ–Ω–∏—Ç—å', async(ctx) => {
    if(ctx.session.isLoggedIn)
        ctx.scene.enter('menuLoggedIn');
    else
        ctx.scene.enter('menu');
});

nickname.on('sticker', (ctx) => ctx.reply('üëç'));

nickname.on('message', async(ctx) => {
    try{
        if(ctx.message.text == '‚úÖ–î–∞'){
            ctx.session.parser = new Parser(ctx.session.userAccount, ctx.from.id);
            ctx.scene.enter('password');
        }
        else if(ctx.message.text == '‚ùé–ù–µ—Ç'){
            delete ctx.session.userAccount;
            ctx.replyWithHTML('üîÅ<b>–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑</b>',
            Telegraf.Markup.keyboard([['üíî–û—Ç–º–µ–Ω–∏—Ç—å']]).oneTime().resize().extra());
        }
        else if(ctx.message.text.indexOf('@') == 0){
            ctx.session.userAccount = ctx.message.text.slice(1);
            ctx.replyWithHTML('üë®üèª‚Äçüíª–¢—ã —Ö–æ—á–µ—à—å —É—Å—Ç–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º "<b>' + ctx.message.text.slice(1) + '</b>"?', Telegraf.Markup
            .keyboard([['‚úÖ–î–∞', '‚ùé–ù–µ—Ç']]).oneTime().resize().extra());
        }
        else{
            ctx.replyWithHTML('‚ùé<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',
            Telegraf.Markup.keyboard([['üíî–û—Ç–º–µ–Ω–∏—Ç—å']]).oneTime().resize().extra());
        }
    }
    catch{
        ctx.replyWithHTML('‚ùé<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞</b>. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑');
        ctx.scene.enter('menu');
    }
    
});

menu.enter(async(ctx) => {
    ctx.reply('üì±–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',Telegraf.Markup.keyboard([['üîç–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç', 'üß¨–°–æ–≥–ª–∞—à–µ–Ω–∏–µ'], ['üí£–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ', 'üß≠–û –±–æ—Ç–µ']]).oneTime().resize().extra());
});

menu.hears('üí£–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ', async(ctx) => {
    ctx.reply('–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å: \n@belotserkovtsev')
});

menu.hears('üîç–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç', Stage.enter('nickname'));

menu.hears('üß≠–û –±–æ—Ç–µ', async(ctx) => {
    ctx.replyWithHTML(`üöÄ –ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–≤–æ—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—É–Ω–∫—Ç–∞–º: üöÄ

<b>–ü–æ–¥–ø–∏—Å–∫–∏,
–ü–æ–¥–ø–∏—Å—á–∏–∫–∏,
–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏,
–ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏,
–ù–∞ –º–µ–Ω—è –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –≤ –æ—Ç–≤–µ—Ç,
–Ø –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –≤ –æ—Ç–≤–µ—Ç,
–¢–æ–ø –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤,
–ó–æ–º–±–∏-–ø–æ–¥–ø–∏—Å—á–∏–∫–∏</b>`)
});

menu.hears('üß¨–°–æ–≥–ª–∞—à–µ–Ω–∏–µ', async(ctx) => {
    ctx.replyWithHTML(`–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –ò–Ω—Å—Ç–∞–≥—Ä–∞–º, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ–Ω –±—É–¥–µ—Ç –Ω–∞–≤—Å–µ–≥–¥–∞ —É–¥–∞–ª–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞.

–ú–æ–≥—É –∑–∞–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–∞—Ä–æ–ª–∏ <b>–Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è</b> —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º, <b>–Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è</b> –∏ <b>–Ω–µ —Ö—Ä–∞–Ω—è—Ç—Å—è</b> –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–∏ –≤ –∫–∞–∫–æ–º –≤–∏–¥–µ. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É, –±–æ—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –∫—É–∫–∏ –≤ —Ñ–∞–π–ª –∏ –∫–ª–∞–¥–µ—Ç –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É üìµ<b>–ó–∞–±—ã—Ç—å –º–µ–Ω—è</b> –∏ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –∫—É–∫–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.
    
<b>–ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –∫—É–∫–∏ –±–æ—Ç—É (–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–∫–∏—Ö –∫–∞–∫ –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–¥–ø–∏—Å—á–∏–∫–∏, –ª–∞–π–∫–∏, –æ—Ç–º–µ—Ç–∫–∏ ¬´—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª)</b>
    
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é open source, —Ç–∞–∫ —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å <a href="https://github.com/belotserkovtsev/insta-bot">–∏–∑—É—á–∞—Ç—å –µ–≥–æ –∫–æ–¥</a>, —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–µ—Ä—Å–∏—è–º–∏ –∏–ª–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —á—Ç–æ —ç—Ç–æ –º–æ–∏ terms of service üòÅ`);
});

menu.on('message', async(ctx) => {
    ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é')
});

menuLoggedIn.enter(async(ctx) => {
    ctx.replyWithHTML('üì±<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>',Telegraf.Markup.keyboard([['üìü–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'üß¨–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å'], ['üîç–°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', 'üß≠–û –±–æ—Ç–µ'] ,['üí£–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ', 'üìµ–ó–∞–±—ã—Ç—å –º–µ–Ω—è']]).oneTime().resize().extra());
})

menuLoggedIn.hears('üìü–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', Stage.enter('lk'));

menuLoggedIn.hears('üß¨–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å', async (ctx) => {
    let jsonData;
    jsonData = JSON.parse(fs.readFileSync('./userdata/' + ctx.from.id + '.json'));
    if(ctx.session.isLoggedIn && (jsonData.isFirstParse || jsonData.rights > 0 || (jsonData.rights == 0 && jsonData.timeupdate/1000 <= (Date.now()/1000)-86400))){
        await ctx.reply('üîÆ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä...');

        let outputString = '\nüöÄ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞</b> üöÄ\n\n'
        let outputStringEnd = '';

        ctx.session.parser.getFollowers(jsonData.igId).then(async (res) => {
            let followers = res['followers'];
            let newFollowers = res['newFollowers'].length;
            let lostFollowers = res['lostFollowers'].length;
            let newFollowersCount, idontFollowBackCount;

            if(!jsonData.isFirstParse){
                newFollowersCount = res['newFollowers'].length - res['lostFollowers'].length;
                idontFollowBackCount = res['idontFollowBack'].length - jsonData.idontFollowBack.length;
            }
            else{
                newFollowersCount = 0;
                idontFollowBackCount = 0;
                newFollowers = 0;
                lostFollowers = 0;
            }
            

            outputString += newFollowersCount >= 0 ? `üë©üèº‚Äçüíª –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: ${followers.length} (<b>+${newFollowersCount}</b>)\n\n` : `üë©üèº‚Äçüíª –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: ${followers.length} (<b>${newFollowersCount}</b>)\n\n`;
            outputString += idontFollowBackCount >= 0 ? `üôÖüèª‚Äç‚ôÇÔ∏è –Ø –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –≤ –æ—Ç–≤–µ—Ç: ${res['idontFollowBack'].length} (<b>+${idontFollowBackCount}</b>)\n\n` : `üôÖüèª‚Äç‚ôÇÔ∏è –Ø –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –≤ –æ—Ç–≤–µ—Ç: ${res['idontFollowBack'].length} (<b>${idontFollowBackCount}</b>)\n\n`;
            outputStringEnd += `üëçüèª –ù–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: <b>${newFollowers}</b>\n\nüëéüèª –û—Ç –º–µ–Ω—è –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å: <b>${lostFollowers}</b>\n`;

            ctx.session.parser.getFollowing(jsonData.igId).then(async (res) => {
                // console.log(res)
                let dfmbCount, followingCount;
    
                if(!jsonData.isFirstParse){
                    dfmbCount = res['dontFollowMeBack'].length - jsonData.dontFollowMeBack.length;
                    followingCount = res['following'].length - jsonData.following.length;
                }
                else{
                    dfmbCount = 0;
                    followingCount = 0;
                }
    
                outputString += followingCount >= 0 ? `üë®üèª‚Äçüíª –ü–æ–¥–ø–∏—Å–∫–∏: ${res['following'].length} (<b>+${followingCount}</b>)\n\n` : `üë®üèª‚Äçüíª –ü–æ–¥–ø–∏—Å–∫–∏: ${res['following'].length} (<b>${followingCount}</b>)\n\n`;
                outputString += dfmbCount >= 0 ? `üßü‚Äç‚ôÄÔ∏è –ù–∞ –º–µ–Ω—è –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –≤ –æ—Ç–≤–µ—Ç: ${res['dontFollowMeBack'].length} (<b>+${dfmbCount}</b>)\n\n` : `üßü‚Äç‚ôÄÔ∏è –ù–∞ –º–µ–Ω—è –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –≤ –æ—Ç–≤–µ—Ç: ${res['dontFollowMeBack'].length} (<b>${dfmbCount}</b>)\n\n`;
    
                
    
                if(jsonData.isFirstParse){
                    jsonData = JSON.parse(fs.readFileSync('./userdata/' + ctx.from.id + '.json'));
                    jsonData.isFirstParse = false;
                    jsonData.timeupdate = Date.now();
                    jsonData.monthlyTimeupdate = Date.now();
                    jsonData.newFollowers = [];
                    jsonData.monthlyFollowers = jsonData.followers.length;
                    jsonData.monthlyFollowing = jsonData.following.length;
                    await ctx.replyWithHTML('üîÆ<b>–ü–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω</b>. –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∞—è –±–∞–∑–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–æ –Ω–∞–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –µ—Å–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ \n–≤ "üìü–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"');
                    fs.writeFile('./userdata/' + ctx.from.id + '.json', JSON.stringify(jsonData, null, 2), err => {
                        if(err)
                            throw(err);
                    });
                }
                else{
                    jsonData = JSON.parse(fs.readFileSync('./userdata/' + ctx.from.id + '.json'));
                    if((jsonData.monthlyTimeupdate/1000) >= Date.now() - (86400*30)){
                        jsonData.monthlyTimeupdate = Date.now();
                        jsonData.monthlyFollowers = jsonData.followers.length;
                        jsonData.monthlyFollowing = jsonData.following.length;
                    }
                    jsonData.timeupdate = Date.now();
                    fs.writeFile('./userdata/' + ctx.from.id + '.json', JSON.stringify(jsonData, null, 2), err => {
                        if(err)
                            throw(err);
                    });
                }
                outputString += outputStringEnd;
                ctx.replyWithHTML(outputString);
            })
        })
        .catch(err => {
            console.log(err);
            ctx.replyWithHTML(`üß¨<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–∏ @belotserkovtsev –æ–± —ç—Ç–æ–º</b>`);
        });
        
    }
    else{
        let secondsLeft = Math.floor((jsonData.timeupdate/1000)+86400-(Date.now()/1000));
        let hours = Math.floor((secondsLeft/60)/60);
        let minutes = Math.floor((secondsLeft/60) - hours * 60);
        ctx.replyWithHTML(`üß¨<b>–°–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ${hours}—á., ${minutes}–º–∏–Ω.</b>`);
    }
});

menuLoggedIn.hears('üí£–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ', async(ctx) => {
    ctx.replyWithHTML('<b>–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å</b>: \n@belotserkovtsev')
});

menuLoggedIn.hears('üß≠–û –±–æ—Ç–µ', async(ctx) => {
    ctx.replyWithHTML(`üöÄ –ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–≤–æ—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—É–Ω–∫—Ç–∞–º: üöÄ

<b>–ü–æ–¥–ø–∏—Å–∫–∏,
–ü–æ–¥–ø–∏—Å—á–∏–∫–∏,
–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏,
–ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏,
–ù–∞ –º–µ–Ω—è –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –≤ –æ—Ç–≤–µ—Ç,
–Ø –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –≤ –æ—Ç–≤–µ—Ç,
–¢–æ–ø –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤,
–ó–æ–º–±–∏-–ø–æ–¥–ø–∏—Å—á–∏–∫–∏</b>`)
});

// menuLoggedIn.('msg', ctx => {
//     let jsonData = JSON.parse(fs.readFileSync('./userdata/' + ctx.message.from.username + '.json'));
//     if(jsonData.rights == 2){
//         jsonData = JSON.parse(fs.readFileSync('./botUsers.json'));
//         jsonData.users.forEach(i => {
//             bot.telegram.sendMessage(i.userId, 'hey');
//         })
//     }
//     else{
//         ctx.reply('–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –≤—ã—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª—è–º –±–æ—Ç–∞');
//     }
// });

menuLoggedIn.hears('üîç–°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', async(ctx) => {
    ctx.scene.enter('newAcc').then(res => {
        ctx.reply('–í—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –±—É–¥—É—Ç —Å—Ç–µ—Ä—Ç—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?', Telegraf.Markup.keyboard([['‚úÖ–î–∞', '‚ùé–ù–µ—Ç']]).oneTime().resize().extra());
    });
});

menuLoggedIn.hears('üìµ–ó–∞–±—ã—Ç—å –º–µ–Ω—è', async(ctx) => {
    ctx.scene.enter('forgetMe').then(res => {
        ctx.reply('–í—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –±—É–¥—É—Ç —Å—Ç–µ—Ä—Ç—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?', Telegraf.Markup.keyboard([['‚úÖ–î–∞', '‚ùé–ù–µ—Ç']]).oneTime().resize().extra());
    });
});

menuLoggedIn.on('message', async(ctx) => {
    try{
        if(ctx.message.text.indexOf('#?') == 0){
            let jsonData = JSON.parse(fs.readFileSync('./userdata/' + ctx.from.id + '.json'));
            if(jsonData.rights == 2){
                jsonData = JSON.parse(fs.readFileSync('./botUsers.json'));
                for(let i = 0; i < jsonData.users.length; ++i){
                    bot.telegram.sendMessage(jsonData.users[i].userId, ctx.message.text.slice(2))
                    .catch(err => {
                        console.log(`user: ${jsonData.users[i].username}, id: ${jsonData.users[i].userId} left bot`);
                    });
                }
            }
            else{
                ctx.reply('–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –≤—ã—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª—è–º –±–æ—Ç–∞');
            }
        }
        else
            ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é')
    }
    catch(err){
        console.log(err);
        ctx.replyWithHTML(`üìµ–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞`);
        ctx.scene.reenter();
    }
});

lk.enter(async(ctx) => {
    jsonData = JSON.parse(fs.readFileSync('./userdata/' + ctx.from.id + '.json'));
    if(jsonData.isFirstParse){
        ctx.replyWithHTML('üìü<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</b>. –ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. <b>–í–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>')
        .then(res => ctx.scene.enter('menuLoggedIn'));
    }
    else{
        let followersGain = Math.round(((jsonData.followers.length - jsonData.monthlyFollowers) / jsonData.monthlyFollowers)*100);
        let followingGain = Math.round(((jsonData.following.length - jsonData.monthlyFollowing) / jsonData.monthlyFollowing)*100);
        let signFollowersGain, signFollowingGain;
        followersGain >= 0 ? signFollowersGain = '+' : signFollowersGain = '';
        followingGain >= 0 ? signFollowingGain = '+' : signFollowingGain = '';

        ctx.replyWithHTML(`üì± –ò–Ω—Å—Ç–∞–≥—Ä–∞–º: ${ctx.session.userAccount}\n\nüë©üèª‚Äçüíª <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${jsonData.followers.length}</b>\n‚ö°Ô∏è${signFollowersGain}${followersGain}% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n\nüë®üèª‚Äçüíª <b>–ü–æ–¥–ø–∏—Å–æ–∫: ${jsonData.following.length}</b>\n‚ö°Ô∏è${signFollowingGain}${followingGain}% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü`
        ,Telegraf.Markup.keyboard([['üì±–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], ['üë±üèª‚Äç‚ôÄÔ∏è–ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏', 'ü§¶üèº‚Äç‚ôÄÔ∏è–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏'], ['üë®üèª‚Äçüíª–Ø –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –≤ –æ—Ç–≤–µ—Ç', 'üôÖüèª–ù–∞ –º–µ–Ω—è –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –≤ –æ—Ç–≤–µ—Ç'], ['üßü‚Äç‚ôÄÔ∏è–ü–æ–¥–ø–∏—Å—á–∏–∫–∏-–∑–æ–º–±–∏', 'üë∏üèº–¢–æ–ø –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤']]).oneTime().resize().extra());
    }
    
});

lk.hears('üì±–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async(ctx) => {
    ctx.scene.enter('menuLoggedIn');
});

lk.hears('üôÖüèª–ù–∞ –º–µ–Ω—è –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –≤ –æ—Ç–≤–µ—Ç', async(ctx) => {
    let keyboard = [['üì≤–ù–∞–∑–∞–¥']];
    let jsonData;
    jsonData = JSON.parse(fs.readFileSync('./userdata/' + ctx.from.id + '.json'));
    for(let i = 0; i < jsonData.dontFollowMeBack.length - 1; i+=2){
        keyboard.push([ `@${jsonData.dontFollowMeBack[i]['username']}`, `@${jsonData.dontFollowMeBack[i+1]['username']}` ]);
    }
    if(jsonData.dontFollowMeBack.length % 2 != 0){
        keyboard.push([ `@${jsonData.dontFollowMeBack[jsonData.dontFollowMeBack.length-1]['username']}` ])
    }
    ctx.replyWithHTML(`üôÖüèª<b>–ù–∞ –º–µ–Ω—è –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–æ –≤ –æ—Ç–≤–µ—Ç ${jsonData.dontFollowMeBack.length} —á.</b>`, 
    Telegraf.Markup.keyboard(keyboard).oneTime().resize().extra());
});

lk.hears('üë®üèª‚Äçüíª–Ø –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –≤ –æ—Ç–≤–µ—Ç', async(ctx) => {
    let keyboard = [['üì≤–ù–∞–∑–∞–¥']];
    let jsonData;
    jsonData = JSON.parse(fs.readFileSync('./userdata/' + ctx.from.id + '.json'));
    for(let i = 0; i < jsonData.idontFollowBack.length - 1; i+=2){
        keyboard.push([ `@${jsonData.idontFollowBack[i]['username']}`, `@${jsonData.idontFollowBack[i+1]['username']}` ]);
    }
    if(jsonData.idontFollowBack.length % 2 != 0){
        keyboard.push([ `@${jsonData.idontFollowBack[jsonData.idontFollowBack.length-1]['username']}` ])
    }
    ctx.replyWithHTML(`üë®üèª‚Äçüíª<b>–Ø –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –≤ –æ—Ç–≤–µ—Ç –Ω–∞ ${jsonData.idontFollowBack.length} —á.</b>`, 
    Telegraf.Markup.keyboard(keyboard).oneTime().resize().extra());
});

lk.hears('üë±üèª‚Äç‚ôÄÔ∏è–ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏', async(ctx) => {
    let keyboard = [['üì≤–ù–∞–∑–∞–¥']];
    let jsonData;
    jsonData = JSON.parse(fs.readFileSync('./userdata/' + ctx.from.id + '.json'));
    for(let i = 0; i < jsonData.newFollowers.length - 1; i+=2){
        keyboard.push([ `@${jsonData.newFollowers[i]['username']}`, `@${jsonData.newFollowers[i+1]['username']}` ]);
    }
    if(jsonData.newFollowers.length % 2 != 0){
        keyboard.push([ `@${jsonData.newFollowers[jsonData.newFollowers.length-1]['username']}` ])
    }
    ctx.replyWithHTML(`üë±üèª‚Äç‚ôÄÔ∏è<b>–ù–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${jsonData.newFollowers.length}</b>`, 
    Telegraf.Markup.keyboard(keyboard).oneTime().resize().extra());
});

lk.hears('ü§¶üèº‚Äç‚ôÄÔ∏è–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏', async(ctx) => {
    let keyboard = [['üì≤–ù–∞–∑–∞–¥']];
    let jsonData;
    jsonData = JSON.parse(fs.readFileSync('./userdata/' + ctx.from.id + '.json'));
    for(let i = 0; i < jsonData.lostFollowers.length - 1; i+=2){
        keyboard.push([ `@${jsonData.lostFollowers[i]['username']}`, `@${jsonData.lostFollowers[i+1]['username']}` ]);
    }
    if(jsonData.lostFollowers.length % 2 != 0){
        keyboard.push([ `@${jsonData.lostFollowers[jsonData.lostFollowers.length-1]['username']}` ])
    }
    ctx.replyWithHTML(`ü§¶üèº‚Äç‚ôÄÔ∏è<b>–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${jsonData.lostFollowers.length}</b>`, 
    Telegraf.Markup.keyboard(keyboard).oneTime().resize().extra());
});

lk.hears('üßü‚Äç‚ôÄÔ∏è–ü–æ–¥–ø–∏—Å—á–∏–∫–∏-–∑–æ–º–±–∏', async(ctx) => {
    ctx.replyWithHTML('üßü‚Äç‚ôÄÔ∏è <b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b> üßü‚Äç‚ôÄÔ∏è');
});

lk.hears('üë∏üèº–¢–æ–ø –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤', async(ctx) => {
    ctx.replyWithHTML('üë∏üèº <b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b> üë∏üèº');
});



lk.hears('üì≤–ù–∞–∑–∞–¥', async(ctx) => {
    ctx.scene.reenter();
});

lk.on('message', async(ctx) => {
    if(ctx.message.text.indexOf('@') == 0){
        ctx.reply(`https://instagram.com/${ctx.message.text.slice(1)}`);
    }
    else{
        ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é')
    }
})

// newAcc.enter(ctx => {})

newAcc.hears('‚úÖ–î–∞', async(ctx) => {
    delete ctx.session.isLoggedIn;
    fs.unlink(`./userdata/${ctx.from.id}.json`, res => {});
    fs.unlink(`./cookie/${ctx.from.id}`, res => {});

    delete ctx.session.parser;
    delete ctx.session.userAccount;
    ctx.scene.enter('nickname');
});

newAcc.hears('‚ùé–ù–µ—Ç', async(ctx) => {
    ctx.scene.enter('menuLoggedIn');
})

forgetMe.hears('‚úÖ–î–∞', async(ctx) => {
    // console.log('delete');
    delete ctx.session.isLoggedIn;
    fs.unlink(`./userdata/${ctx.from.id}.json`, res => {});
    fs.unlink(`./cookie/${ctx.from.id}`, res => {});

    delete ctx.session.parser;
    delete ctx.session.userAccount;
    ctx.scene.enter('menu');
});

forgetMe.hears('‚ùé–ù–µ—Ç',async(ctx) => {
    ctx.scene.enter('menuLoggedIn');
});

challenge.enter(async(ctx) => {
    ctx.session.parser.challenge('getsms', ctx.session.url);
    ctx.replyWithHTML(`üîê<b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥ —Å –Ω–µ–∑–Ω–∞–∫–æ–º–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.</b> –ù–∞ —Ç–≤–æ–π –Ω–æ–º–µ—Ä –≤—ã—Å–ª–∞–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –í–≤–µ–¥–∏ –µ–≥–æ —Å—é–¥–∞`,
    Telegraf.Markup.keyboard(['üíî–û—Ç–º–µ–Ω–∞']).oneTime().resize().extra());
});

challenge.hears('üíî–û—Ç–º–µ–Ω–∞', async(ctx) => {
    delete ctx.session.parser;
    delete ctx.session.url;
    fs.unlink('./cookie/' + ctx.from.id, res => {});
    delete ctx.session.userAccount;
    ctx.scene.enter('menu');
});

challenge.on('message', async (ctx)=>{
    try{
        ctx.session.parser.challenge('postsms', ctx.session.url, ctx.message.text).then(async(res)=>{
            let jsonData = JSON.parse(fs.readFileSync('./userdata/' + ctx.from.id + '.json'));
            jsonData.loggedIn = true;
            fs.writeFile('./userdata/' + ctx.from.id + '.json', JSON.stringify(jsonData, null, 2), err => {
                if(err)
                    throw(err);
            });
            ctx.scene.enter('menuLoggedIn');
        })
        
    }
    catch{
        ctx.replyWithHTML(`üîê<b>–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞</b>`);
        ctx.scene.enter('menu');
    }
})

/* Registering scenes */
const stage = new Stage();
stage.register(nickname);
stage.register(password);
stage.register(menu);
stage.register(menuLoggedIn);
stage.register(lk);
stage.register(tfa);
stage.register(newAcc);
stage.register(forgetMe);
stage.register(challenge);

/* Making staging work, initializing session for personalized statistics */
bot.use(session())
bot.use(stage.middleware())

/* On /start event handler */
bot.start(async (ctx) => {
    try{
        let jsonData;
        let existsFile = false;
        jsonData = JSON.parse(fs.readFileSync('./botUsers.json'));
        let userExists = false;
        jsonData.users.forEach(i => {
            if(i['userId'] == ctx.from.id){
                userExists = true;
                return;
            }
        })
        if(!userExists){
            jsonData.users.push({'username': ctx.from.username, 'userId': ctx.from.id});
            let data = JSON.stringify(jsonData, null, 2);
            fs.writeFile('./botUsers.json', data, err => {
                if(err)
                    console.log(err);
            });
        }

        if(fs.existsSync('./userdata/' + ctx.from.id + '.json')){
            jsonData = JSON.parse(fs.readFileSync('./userdata/' + ctx.from.id + '.json'));
            existsFile = true;
        }
        if(!ctx.session.isLoggedIn && existsFile && jsonData.loggedIn){
            ctx.session.isLoggedIn = true;
            ctx.session.userAccount = jsonData.igNickname;

            if(!ctx.session.parser){
                ctx.session.parser = new Parser(ctx.session.userAccount, ctx.from.id);
            }
        }
        await ctx.replyWithHTML('üíª<b>–ü—Ä–∏–≤–µ—Ç!</b>. –ï—Å–ª–∏ –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –±–∞–≥–∏ - —Å—Ä–∞–∑—É –ø–∏—à–∏ @belotserkovtsev')
        .catch(err => {
            console.log(`user: ${ctx.from.username}, id: ${ctx.from.id} error on start`);
            throw err;
        })
        if(ctx.session.isLoggedIn)
            ctx.scene.enter('menuLoggedIn');
        else
            ctx.scene.enter('menu');
    }
    catch{
        ctx.session = null;
    }
});

bot.on('message', async (ctx) => {
    try{
        let jsonData;
        let existsFile = false;
        if(fs.existsSync('./userdata/' + ctx.from.id + '.json')){
            jsonData = JSON.parse(fs.readFileSync('./userdata/' + ctx.from.id + '.json'));
            existsFile = true;
        }
        if(!ctx.session.isLoggedIn && existsFile && jsonData.loggedIn){
            ctx.session.isLoggedIn = true;
            ctx.session.userAccount = jsonData.igNickname;

            if(!ctx.session.parser){
                ctx.session.parser = new Parser(ctx.session.userAccount, ctx.from.id);
            }
        }
        await ctx.replyWithHTML('üíª<b>–ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è</b>. –ù–æ —Ç–µ–ø–µ—Ä—å –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ. –¢–≤–æ—è —Å–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
        .catch(err => {
            console.log(`user: ${ctx.from.username}, id: ${ctx.from.id} error on start`);
            throw err;
        })
        if(ctx.session.isLoggedIn)
            ctx.scene.enter('menuLoggedIn');
        else
            ctx.scene.enter('menu');
    }
    catch{
        ctx.session = null;
    }
})



bot.launch();