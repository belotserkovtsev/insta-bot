const Telegraf = require('telegraf');
const Stage = require('telegraf/stage')
const session = require('telegraf/session')
const BaseScene = require('telegraf/scenes/base')
const SocksAgent = require('socks5-https-client/lib/Agent');
var Parser = require('./parser.js');
const fs = require('fs');

/* proxy is needed to work with bot from Russia
free-socks: http://spys.one/en/socks-proxy-list/ */
const socksAgent = new SocksAgent({
  socksHost: "ip",
  socksPort: "port"
});

const bot = new Telegraf('token', {
    telegram: { agent: socksAgent }
});

/* New scene creation */
const nickname = new BaseScene('nickname');
const password = new BaseScene('password');
const menu = new BaseScene('menu');
const menuLoggedIn = new BaseScene('menuLoggedIn');


password.enter(ctx => {
    ctx.reply('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å!',
    Telegraf.Markup.keyboard([['üíî–û—Ç–º–µ–Ω–∏—Ç—å']]).oneTime().resize().extra())
})

password.hears('üíî–û—Ç–º–µ–Ω–∏—Ç—å', ctx => {
    if(ctx.session.isLoggedIn || (fs.existsSync('./userdata/' + ctx.message.from.username + '.json') && JSON.parse(fs.readFileSync('./userdata/' + ctx.message.from.username + '.json')).loggedIn))
        ctx.scene.enter('menuLoggedIn');
    else
        ctx.scene.enter('menu');
});

password.on('message', ctx => {
    if(ctx.message.text == '‚úÖ–î–∞'){
        ctx.session.parser = new Parser(ctx.session.userAccount, ctx.message.from.username);
        ctx.session.parser.login(ctx.session.userAccount, ctx.session.userPassword).then(res => {
            let jsData = JSON.parse(res['data'])
            if(jsData['authenticated']){
                let userData = {
                    igNickname : ctx.session.userAccount,
                    igId : jsData['userId'],
                    username : ctx.message.from.username,
                    loggedIn: true,
                    isFirstParse: true,
                    followers:[],
                    following: [],
                    idontFollowBack: [],
                    dontFollowMeBack: []
                }
                let data = JSON.stringify(userData, null, 2);
                fs.writeFileSync('./userdata/' + ctx.message.from.username + '.json', data);
                ctx.session.isLoggedIn = true;
                // ctx.session.telegramAccount = 
                ctx.session.userPassword = '';
                ctx.scene.enter('menuLoggedIn');
            }
            else if(jsData['user']){
                ctx.reply('–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',
                Telegraf.Markup.keyboard([['üíî–û—Ç–º–µ–Ω–∏—Ç—å']]).oneTime().resize().extra());
                ctx.session.userPassword = '';
            }
            else{
                ctx.session.userPassword = '';
                ctx.reply('–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç. –ù–∞–ø–∏—à–∏ @belotserkovtsev –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ!');
                ctx.scene.enter('menu');
            }
        }).catch(err => {
            console.log(err);
        })
    }
    else if(ctx.message.text == '‚ùé–ù–µ—Ç'){
        userAccount = '';
        ctx.reply('–î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑–æ–∫',
        Telegraf.Markup.keyboard([['üíî–û—Ç–º–µ–Ω–∏—Ç—å']]).oneTime().resize().extra());
    }
    else{
        ctx.session.userPassword = ctx.message.text;
        ctx.reply('–ü–∞—Ä–æ–ª—å "' + ctx.message.text + '". –í—Å–µ –≤–µ—Ä–Ω–æ?', Telegraf.Markup
        .keyboard([['‚úÖ–î–∞', '‚ùé–ù–µ—Ç']]).oneTime().resize().extra());
    }
})

password.leave(ctx => {})

nickname.enter(ctx => {
    ctx.reply('–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º. –ù–∞–ø—Ä–∏–º–µ—Ä @belotserkovtsev', 
    Telegraf.Markup.keyboard([['üíî–û—Ç–º–µ–Ω–∏—Ç—å']]).oneTime().resize().extra());
});
nickname.hears('üíî–û—Ç–º–µ–Ω–∏—Ç—å', ctx => {
    if(ctx.session.isLoggedIn || (fs.existsSync('./userdata/' + ctx.message.from.username + '.json') && JSON.parse(fs.readFileSync('./userdata/' + ctx.message.from.username + '.json')).loggedIn))
        ctx.scene.enter('menuLoggedIn');
    else
        ctx.scene.enter('menu');
});
nickname.on('message', ctx => {
    if(ctx.message.text == '‚úÖ–î–∞'){
        ctx.scene.enter('password');
    }
    else if(ctx.message.text == '‚ùé–ù–µ—Ç'){
        ctx.session.userAccount = '';
        ctx.reply('–î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑–æ–∫',
        Telegraf.Markup.keyboard([['üíî–û—Ç–º–µ–Ω–∏—Ç—å']]).oneTime().resize().extra());
    }
    else if(ctx.message.text.indexOf('@') == 0){
        ctx.session.userAccount = ctx.message.text.slice(1);
        ctx.reply('–¢—ã —Ö–æ—á–µ—à—å —É—Å—Ç–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º "' + ctx.message.text.slice(1) + '"?', Telegraf.Markup
        .keyboard([['‚úÖ–î–∞', '‚ùé–ù–µ—Ç']]).oneTime().resize().extra());
    }
    else{
        ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',
        Telegraf.Markup.keyboard([['üíî–û—Ç–º–µ–Ω–∏—Ç—å']]).oneTime().resize().extra());
    }
})
nickname.on('error', err => console.log(err));
nickname.leave(ctx => {});

menu.enter(ctx => {
    ctx.reply('üì±–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–µ –≤–æ—à–µ–ª',Telegraf.Markup.keyboard([['üîç–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç', 'üß¨–û –±–æ—Ç–µ'], ['üí£–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ']]).oneTime().resize().extra());
});

menu.hears('üí£–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ', ctx => {
    ctx.reply('–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å: \n@belotserkovtsev')
});

menu.hears('üîç–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç', Stage.enter('nickname'));

menu.hears('üß¨–û –±–æ—Ç–µ', ctx => {
    ctx.reply('–û–ø–∏—Å–∞–Ω–∏–µ');
});

menu.on('message', ctx => {
    ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é')
});

menu.leave(ctx => {});

menuLoggedIn.enter(ctx => {
    ctx.reply('üì±–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í–æ—à–µ–ª',Telegraf.Markup.keyboard([['üìü–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'üß¨–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å'], ['üîç–°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', 'üìÑ–û –±–æ—Ç–µ'] ,['üí£–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ', 'üìµ–ó–∞–±—ã—Ç—å –º–µ–Ω—è']]).oneTime().resize().extra());
})

menuLoggedIn.hears('üìü–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', ctx => {
    ctx.reply('–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
});

menuLoggedIn.hears('üß¨–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å', async (ctx) => {
    let jsonData;
    let existsFile = false;
    if(fs.existsSync('./userdata/' + ctx.message.from.username + '.json')){
        jsonData = JSON.parse(fs.readFileSync('./userdata/' + ctx.message.from.username + '.json'));
        existsFile = true;
    }
    if(!ctx.session.isLoggedIn && existsFile && jsonData.loggedIn){
        ctx.session.isLoggedIn = true;
        ctx.session.userAccount = jsonData.igNickname;
    }
    if(!ctx.session.parser){
        ctx.session.parser = new Parser(ctx.session.userAccount, ctx.message.from.username);
    }
    if(ctx.session.isLoggedIn){
        let followers, following, idontFollowBack, dontFollowMeBack;
        followers = jsonData.followers;
        following = jsonData.following;
        idontFollowBack = jsonData.idontFollowBack;
        dontFollowMeBack = jsonData.dontFollowMeBack;

        await ctx.session.parser.getFollowers(jsonData.igId).then(async (res) => {
            console.log(res);
            if(jsonData.isFirstParse)
                await ctx.reply('–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞, –Ω–æ –Ω–∞–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –µ—Å–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ \n"üìü–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"')
            let newFollowersCount = res['newFollowers'].length - res['lostFollowers'].length;
            if(newFollowersCount > 0)
                await ctx.reply('+' + res['newFollowers'].length + ' –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n');
            else if(newFollowersCount < 0)
                await ctx.reply('-' + res['lostFollowers'].length + ' –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤');
            else
                await ctx.reply('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å');
            if(!jsonData.isFirstParse)
                await ctx.reply('–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–π–¥–∏ –≤ "üìü–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"')
            else{
                jsonData.isFirstParse = false;
                // let data = JSON.stringify(jsonData, null, 2);
                fs.writeFileSync('./userdata/' + ctx.message.from.username + '.json', JSON.stringify(jsonData, null, 2));
            }
        });


    }
    // ctx.reply('–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
});

menuLoggedIn.hears('üí£–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ', ctx => {
    ctx.reply('–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å: \n@belotserkovtsev')
});

menuLoggedIn.on('message', ctx => {
    ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é')
});

/* Registering scenes */
const stage = new Stage();
stage.register(nickname);
stage.register(password);
stage.register(menu);
stage.register(menuLoggedIn);

/* Making staging work, initializing session for personalized statistics */
bot.use(session())
bot.use(stage.middleware())

/* On /start event handler */
bot.start(ctx => {
    // ctx.reply('–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-—Ç—Ä–µ–∫–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∏–Ω—Å—Ç–∞–≥—Ä–∞–º. –Ø —É–º–µ—é:\n–°—á–∏—Ç–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n–ù–∞—Ö–æ–¥–∏—Ç—å —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤–∞—Å', 
    // Telegraf.Markup.keyboard([['üîç–í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –Ω–∏–∫', 'üß¨–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å'], ['üí£–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ']]).oneTime().resize().extra());
    if(ctx.session.isLoggedIn || (fs.existsSync('./userdata/' + ctx.message.from.username + '.json') && JSON.parse(fs.readFileSync('./userdata/' + ctx.message.from.username + '.json')).loggedIn))
        ctx.scene.enter('menuLoggedIn');
    else
        ctx.scene.enter('menu');
});



bot.launch();
